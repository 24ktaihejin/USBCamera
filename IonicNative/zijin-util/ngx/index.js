var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
/**
 * This is a template for new plugin wrappers
 *
 * TODO:
 * - Add/Change information below
 * - Document usage (importing, executing main functionality)
 * - Remove any imports that you are not using
 * - Remove all the comments included in this template, EXCEPT the @Plugin wrapper docs and any other docs you added
 * - Remove this note
 *
 */
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import { Observable } from 'rxjs';
var ZijinUtil = /** @class */ (function (_super) {
    __extends(ZijinUtil, _super);
    function ZijinUtil() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ZijinUtil.prototype.scan = function () { return cordova(this, "scan", {}, arguments); };
    ZijinUtil.prototype.openScanReceiver = function () { return cordova(this, "openScanReceiver", { "observable": true }, arguments); };
    ZijinUtil.prototype.continueScanning = function () { return cordova(this, "continueScanning", { "observable": true }, arguments); };
    ZijinUtil.prototype.closeScanning = function () { return cordova(this, "closeScanning", {}, arguments); };
    ZijinUtil.prototype.setScanner = function (options) { return cordova(this, "setScanner", {}, arguments); };
    ZijinUtil.prototype.setScanInterval = function (time) { return cordova(this, "setScanInterval", {}, arguments); };
    ZijinUtil.prototype.openUHF = function () { return cordova(this, "openUHF", {}, arguments); };
    ZijinUtil.prototype.closeUHF = function () { return cordova(this, "closeUHF", {}, arguments); };
    ZijinUtil.prototype.startInventoryReal = function (options) { return cordova(this, "startInventoryReal", { "observable": true }, arguments); };
    ZijinUtil.prototype.stopInventoryReal = function () { return cordova(this, "stopInventoryReal", {}, arguments); };
    ZijinUtil.prototype.getReaderTemperature = function () { return cordova(this, "getReaderTemperature", {}, arguments); };
    ZijinUtil.prototype.killTag = function (btAryPassWord) { return cordova(this, "killTag", {}, arguments); };
    ZijinUtil.prototype.lockTag = function (options) { return cordova(this, "lockTag", {}, arguments); };
    ZijinUtil.prototype.readTag = function (options) { return cordova(this, "readTag", {}, arguments); };
    ZijinUtil.prototype.writeTag = function (options) { return cordova(this, "writeTag", {}, arguments); };
    ZijinUtil.prototype.reset = function () { return cordova(this, "reset", {}, arguments); };
    ZijinUtil.prototype.setInventoryDelayMillis = function (delayMillis) { return cordova(this, "setInventoryDelayMillis", {}, arguments); };
    ZijinUtil.prototype.setOutputPower = function (mOutPower) { return cordova(this, "setOutputPower", {}, arguments); };
    ZijinUtil.prototype.openFingerprint = function () { return cordova(this, "openFingerprint", {}, arguments); };
    ZijinUtil.prototype.closeFingerprint = function () { return cordova(this, "closeFingerprint", {}, arguments); };
    ZijinUtil.prototype.scanFingerprint = function () { return cordova(this, "scanFingerprint", {}, arguments); };
    ZijinUtil.prototype.verifyFingerprint = function (charArray) { return cordova(this, "verifyFingerprint", {}, arguments); };
    ZijinUtil.prototype.loadFpData = function (charArray) { return cordova(this, "loadFpData", {}, arguments); };
    ZijinUtil.pluginName = "ZijinUtil";
    ZijinUtil.plugin = "cordova-plugin-x-zijinutil";
    ZijinUtil.pluginRef = "plugins.zijinutil";
    ZijinUtil.platforms = ["Android"];
    ZijinUtil = __decorate([
        Injectable({
            providedIn: 'root'
        })
    ], ZijinUtil);
    return ZijinUtil;
}(IonicNativePlugin));
export { ZijinUtil };
//# sourceMappingURL=data:application/json;base64,
