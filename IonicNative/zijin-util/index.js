var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import { Observable } from 'rxjs';
var ZijinUtilOriginal = /** @class */ (function (_super) {
    __extends(ZijinUtilOriginal, _super);
    function ZijinUtilOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ZijinUtilOriginal.prototype.openScanReceiver = function () { return cordova(this, "openScanReceiver", { "observable": true }, arguments); };
    ZijinUtilOriginal.prototype.scan = function () { return cordova(this, "scan", {}, arguments); };
    ZijinUtilOriginal.prototype.continueScanning = function () { return cordova(this, "continueScanning", { "observable": true }, arguments); };
    ZijinUtilOriginal.prototype.closeScanning = function () { return cordova(this, "closeScanning", {}, arguments); };
    ZijinUtilOriginal.prototype.setScanner = function (options) { return cordova(this, "setScanner", {}, arguments); };
    ZijinUtilOriginal.prototype.setScanInterval = function (time) { return cordova(this, "setScanInterval", {}, arguments); };
    ZijinUtilOriginal.prototype.openUHF = function () { return cordova(this, "openUHF", {}, arguments); };
    ZijinUtilOriginal.prototype.closeUHF = function () { return cordova(this, "closeUHF", {}, arguments); };
    ZijinUtilOriginal.prototype.startInventoryReal = function (options) { return cordova(this, "startInventoryReal", { "observable": true }, arguments); };
    ZijinUtilOriginal.prototype.stopInventoryReal = function () { return cordova(this, "stopInventoryReal", {}, arguments); };
    ZijinUtilOriginal.prototype.getReaderTemperature = function () { return cordova(this, "getReaderTemperature", {}, arguments); };
    ZijinUtilOriginal.prototype.killTag = function (btAryPassWord) { return cordova(this, "killTag", {}, arguments); };
    ZijinUtilOriginal.prototype.lockTag = function (options) { return cordova(this, "lockTag", {}, arguments); };
    ZijinUtilOriginal.prototype.readTag = function (options) { return cordova(this, "readTag", {}, arguments); };
    ZijinUtilOriginal.prototype.writeTag = function (options) { return cordova(this, "writeTag", {}, arguments); };
    ZijinUtilOriginal.prototype.reset = function () { return cordova(this, "reset", {}, arguments); };
    ZijinUtilOriginal.prototype.setInventoryDelayMillis = function (delayMillis) { return cordova(this, "setInventoryDelayMillis", {}, arguments); };
    ZijinUtilOriginal.prototype.setOutputPower = function (mOutPower) { return cordova(this, "setOutputPower", {}, arguments); };
    ZijinUtilOriginal.prototype.openFingerprint = function () { return cordova(this, "openFingerprint", {}, arguments); };
    ZijinUtilOriginal.prototype.closeFingerprint = function () { return cordova(this, "closeFingerprint", {}, arguments); };
    ZijinUtilOriginal.prototype.scanFingerprint = function () { return cordova(this, "scanFingerprint", {}, arguments); };
    ZijinUtilOriginal.prototype.verifyFingerprint = function (charArray) { return cordova(this, "verifyFingerprint", {}, arguments); };
    ZijinUtilOriginal.prototype.loadFpData = function (charArray) { return cordova(this, "loadFpData", {}, arguments); };
    ZijinUtilOriginal.pluginName = "ZijinUtil";
    ZijinUtilOriginal.plugin = "cordova-plugin-x-zijinutil";
    ZijinUtilOriginal.pluginRef = "plugins.zijinutil";
    ZijinUtilOriginal.platforms = ["Android"];
    return ZijinUtilOriginal;
}(IonicNativePlugin));
var ZijinUtil = new ZijinUtilOriginal();
export { ZijinUtil };
//# sourceMappingURL=data:application/json;base64,
